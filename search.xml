<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Solidity案例-存款合约</title>
    <url>/2022/05/19/Solidity%E6%A1%88%E4%BE%8B-%E5%AD%98%E6%AC%BE%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<h2 id="Solidity代码">Solidity代码</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">   struct <span class="title class_">Users</span> &#123; <span class="comment">// 构造一个结构体</span></span><br><span class="line">       uint <span class="title class_">Balance</span>; <span class="comment">// 余额</span></span><br><span class="line">       string <span class="title class_">Username</span>; <span class="comment">// 名字</span></span><br><span class="line">       bool <span class="title class_">Init</span>; </span><br><span class="line">   &#125;</span><br><span class="line">   uint <span class="title class_">MaxDepositValue</span>; <span class="comment">// 最大存款</span></span><br><span class="line">   uint <span class="title class_">MinDepositValue</span>; <span class="comment">// 最小存款</span></span><br><span class="line">   <span class="title function_">constructor</span> ( uint _MaxDepositValue, uint _MinDepositValue )&#123; <span class="comment">// 在合约被运行时执行里面代码</span></span><br><span class="line">       <span class="title class_">MaxDepositValue</span> = _MaxDepositValue; </span><br><span class="line">       <span class="title class_">MinDepositValue</span> = _MinDepositValue;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getAddress</span>(<span class="params"></span>) public view returns (address) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="title function_">address</span>(<span class="variable language_">this</span>); <span class="comment">// 获取合约地址</span></span><br><span class="line">	&#125;</span><br><span class="line">   mapping ( <span class="function"><span class="params">address</span> =&gt;</span> <span class="title class_">Users</span> ) public <span class="title class_">UserTable</span>; <span class="comment">// 映射地址到Users结构体</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">_transferOut</span>(<span class="params"> address _to,uint Amount </span>) internal &#123; <span class="comment">// 提现函数</span></span><br><span class="line">       <span class="built_in">require</span>(<span class="title class_">Amount</span> &lt;= <span class="title function_">address</span>(<span class="variable language_">this</span>).<span class="property">balance</span>,<span class="string">&quot;you balance?&quot;</span>); <span class="comment">// 验证是否</span></span><br><span class="line">       <span class="title function_">payable</span>( _to ).<span class="title function_">transfer</span>( <span class="title class_">Amount</span> ); <span class="comment">// 给_to转Amount</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getBalance</span>(<span class="params"> address _user </span>) external view <span class="title function_">returns</span>(<span class="params"> uint </span>)&#123; <span class="comment">// 获取用户余额</span></span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;UserTable[_user].Balance:&quot;</span>,<span class="title class_">UserTable</span>[_user].<span class="property">Balance</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">UserTable</span>[_user].<span class="property">Balance</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Deposit</span>(<span class="params"> address user,uint Amount,string memory Names </span>) payable public&#123; <span class="comment">// 存余额</span></span><br><span class="line">       <span class="built_in">require</span>(<span class="title class_">Amount</span>&lt;=<span class="title class_">MaxDepositValue</span>,<span class="string">&quot;Amount&lt;=MaxDepositValue!&quot;</span>); <span class="comment">// 如果amount大于最大存款数额不运行</span></span><br><span class="line">       <span class="built_in">require</span>(<span class="title class_">Amount</span>&gt;<span class="title class_">MinDepositValue</span>,<span class="string">&quot;amount&gt;MinDepositValue!&quot;</span>); <span class="comment">// 如果amount小于最大存款数额不运行</span></span><br><span class="line">       <span class="built_in">require</span>( <span class="title class_">Amount</span> == msg.<span class="property">value</span>,<span class="string">&quot;Amout!=msg.value&quot;</span> ); <span class="comment">// 如果传入的Amount不等于发送时设置的余额就报错</span></span><br><span class="line">       <span class="keyword">if</span> ( ! <span class="title class_">UserTable</span>[user].<span class="property">Init</span> ) <span class="comment">// 如果Init还没初始化过</span></span><br><span class="line">       &#123;</span><br><span class="line">           <span class="title class_">UserTable</span>[user].<span class="property">Init</span> = <span class="literal">true</span>; <span class="comment">// 初始化为true</span></span><br><span class="line">           <span class="title class_">UserTable</span>[user].<span class="property">Username</span> = <span class="title class_">Names</span>; <span class="comment">// 设置名字</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="title class_">UserTable</span>[user].<span class="property">Balance</span>+=<span class="title class_">Amount</span>; <span class="comment">// 让他的余额加上传入的钱</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">transferOur</span>(<span class="params"> uint Amount </span>) external&#123; <span class="comment">// 调用封装的提现</span></span><br><span class="line">       <span class="built_in">require</span>( <span class="title class_">Amount</span> &lt;= <span class="title class_">UserTable</span>[msg.<span class="property">sender</span>].<span class="property">Balance</span>,<span class="string">&quot;you balance&quot;</span> ); <span class="comment">// 不允许Amout大于他本身的余额</span></span><br><span class="line">       <span class="title function_">_transferOut</span>(msg.<span class="property">sender</span>,<span class="title class_">Amount</span>); <span class="comment">// 给msg.sender(调用这个函数的人)转Amount 相当于提现操作</span></span><br><span class="line">   &#125;</span><br><span class="line">    <span class="title function_">fallback</span>() external payable&#123;</span><br><span class="line">        <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>,msg.<span class="property">value</span>,<span class="string">&quot;fallback&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">receive</span>() external payable&#123;</span><br><span class="line">        <span class="title class_">Deposit</span>(msg.<span class="property">sender</span>,msg.<span class="property">value</span>,<span class="string">&quot;receive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>然后我们部署一下，因为写了<code>constructor</code>所以部署时要带上2个值，这个值是<code>wei</code>来做单位</p>
<p>1ETH == 10**18WEI</p>
<p>1ETH == 1000000000000000000WEI</p>
<p>可以用这个转换 -&gt; <a href="https://mycointool.com/EtherConverter">https://mycointool.com/EtherConverter</a></p>
<blockquote>
<p>我的地址<code>0xCF236e14cbB6a14f854f336F97EA5928415dD7C6</code> 存 <strong>5ETH</strong> 到 <code>0xF0CF03e08b65acFD25532a61E8023369617b2c9d</code></p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517184228264.png" alt="image-20220517184228264"></p>
<p>转账后用地址查询余额</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517184324209.png" alt="image-20220517184324209"></p>
<p>账户成功多出<code>5000000000000000000WEI</code></p>
<h2 id="web3-py"><a href="http://web3.py">web3.py</a></h2>
<p>python中可以用<code>web3</code>模块来调用智能合约</p>
<p><code>pip install web3</code></p>
<p>需要先安装<code>vc</code> 网上很多教程</p>
<p>Code</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">rpc = <span class="string">&quot;http://localhost:7545&quot;</span>;</span><br><span class="line">w3 = Web3(HTTPProvider(rpc)) <span class="comment"># 链接测试网rpc</span></span><br><span class="line">acct = w3.eth.account.from_key(<span class="string">&quot;b2d11029e4a8a0de01a28fe3ab9806d6ffa29c3c9469c12f47241537e1a04877&quot;</span>) <span class="comment"># 导入我账户的私钥</span></span><br><span class="line">contract_address = <span class="string">&quot;0xAF2964EF3B3215cedaCf188E8Bd9272F5E4dECC1&quot;</span> <span class="comment"># 合约部署的地址</span></span><br><span class="line">abi = [&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;user&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;,&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Amount&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;,&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;string&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Names&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Deposit&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;payable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Amount&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;transferOur&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;nonpayable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;_MaxDepositValue&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;,&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;_MinDepositValue&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;nonpayable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;constructor&quot;</span>&#125;,&#123;<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;payable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;fallback&quot;</span>&#125;,&#123;<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;payable&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;receive&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;_user&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;getBalance&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;view&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;getInvoker&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;view&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;,&#123;<span class="string">&quot;inputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;address&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;address&quot;</span>&#125;],<span class="string">&quot;name&quot;</span>:<span class="string">&quot;UserTable&quot;</span>,<span class="string">&quot;outputs&quot;</span>:[&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;uint256&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Balance&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;uint256&quot;</span>&#125;,&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;string&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Username&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;string&quot;</span>&#125;,&#123;<span class="string">&quot;internalType&quot;</span>:<span class="string">&quot;bool&quot;</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Init&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;bool&quot;</span>&#125;],<span class="string">&quot;stateMutability&quot;</span>:<span class="string">&quot;view&quot;</span>,<span class="string">&quot;type&quot;</span>:<span class="string">&quot;function&quot;</span>&#125;]</span><br><span class="line">contract = w3.eth.contract(contract_address,abi=abi)</span><br><span class="line"></span><br><span class="line">Amount = <span class="number">5000000000000000000</span> <span class="comment"># 存款的额度</span></span><br><span class="line">construct_txn = contract.functions.Deposit(<span class="string">&quot;0xF0CF03e08b65acFD25532a61E8023369617b2c9d&quot;</span>,Amount,<span class="string">&quot;ctl&quot;</span>).buildTransaction(&#123; <span class="comment"># 调用合约上的Deposit函数进行存款功能，参数一一对应solidity上的Deposit函数</span></span><br><span class="line">  <span class="string">&#x27;from&#x27;</span>: acct.address, <span class="comment"># 谁发起了这个交易就填谁</span></span><br><span class="line">  <span class="string">&#x27;gas&#x27;</span>: <span class="number">131632</span>, <span class="comment"># 是完成交易所需的 gas 数，该数应该比实际需要的 gas 数大一些，所以这里测试我就乱写了</span></span><br><span class="line">  <span class="string">&#x27;value&#x27;</span>: Amount, <span class="comment"># 存款的余额 必须与Deposit的Amount参数一致 否则触发报错信息</span></span><br><span class="line">  <span class="string">&#x27;nonce&#x27;</span>:w3.eth.getTransactionCount(acct.address), <span class="comment"># 交易的标识</span></span><br><span class="line">  <span class="string">&#x27;gasPrice&#x27;</span>: <span class="number">2000000000</span>, <span class="comment"># gas价格</span></span><br><span class="line">&#125;)</span><br><span class="line">signed = acct.signTransaction(construct_txn) <span class="comment"># 签署交易</span></span><br><span class="line">tx_id = w3.eth.sendRawTransaction(signed.rawTransaction) <span class="comment"># 发送原始交易</span></span><br><span class="line"><span class="built_in">print</span>( tx_id.<span class="built_in">hex</span>() ) <span class="comment"># 交易订单号</span></span><br><span class="line">Balance = contract.functions.getBalance(<span class="string">&quot;0xF0CF03e08b65acFD25532a61E8023369617b2c9d&quot;</span>).call() <span class="comment"># 调用合约上getBalance的函数查询这个地址的余额</span></span><br><span class="line"><span class="built_in">print</span>( <span class="string">&quot;现在我存款余额有&quot;</span>,w3.fromWei(Balance,<span class="string">&#x27;ether&#x27;</span>),<span class="string">&quot;个 ETH&quot;</span> ) <span class="comment"># 调用合约getBalance查询地址</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517190717109.png" alt="image-20220517190717109"></p>
<p>但是这个代码只供测试学习，因为很多设计上是不合理的并不可以运用到实际场景！</p>
]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>Solidity</tag>
      </tags>
  </entry>
  <entry>
    <title>Solidity学习手册</title>
    <url>/2022/05/19/Solidity%E5%AD%A6%E4%B9%A0%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<span id="more"></span>
<h2 id="智能合约概述">智能合约概述</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>; <span class="comment">// 源代码使用Solidity版本0.4.0写的，并且使用0.4.0以上版本运行也没问题（最高到0.5.0，但是不包含0.5.0）。这是为了确保合约不会在新的编译器版本中突然行为异常</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 它的函数和数据位于它们位于以太坊区块链的一个特定地址上</span></span><br><span class="line">contract <span class="title class_">SimpleStorage</span> &#123;</span><br><span class="line">    uint storedData;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">uint x</span>) public &#123;</span><br><span class="line">        storedData = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"></span>) public view returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> storedData;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>任何人都可以再次调用 <code>set</code> ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。随后，我们会看到怎样<strong>施加访问</strong>限制，以确保只有你才能改变这个数字</p>
<h2 id="子货币（Subcurrency）例子">子货币（Subcurrency）例子</h2>
<p>下面的合约实现了一个最简单的加密货币币确实可以无中生有地产生，但是只有创建合约的人才能做到（实现一个不同的发行计划也不难）。而且，任何人都可以给其他人转币，不需要注册用户名和密码 —— 所需要的只是以太坊密钥对（key）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.05</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Coin</span> &#123;</span><br><span class="line">    <span class="comment">// 关键字“public”让这些变量可以从外部读取</span></span><br><span class="line">    address public minter; <span class="comment">// 声明了一个可以被公开访问的 address 类型的状态变量</span></span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances; <span class="comment">// 将balances变量变成一个数组 [地址类型:整数数字类型]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 轻客户端可以通过事件针对变化作出高效的反应</span></span><br><span class="line">    event <span class="title class_">Sent</span>(address <span class="keyword">from</span>, address to, uint amount);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是构造函数，只有当合约创建时运行</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Coin</span>(<span class="params"></span>) public &#123;</span><br><span class="line">        minter = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">mint</span>(<span class="params">address receiver, uint amount</span>) public &#123;</span><br><span class="line">        <span class="keyword">if</span> (msg.<span class="property">sender</span> != minter) <span class="keyword">return</span>;</span><br><span class="line">        balances[receiver] += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">address receiver, uint amount</span>) public &#123;</span><br><span class="line">        <span class="keyword">if</span> (balances[msg.<span class="property">sender</span>] &lt; amount) <span class="keyword">return</span>;</span><br><span class="line">        balances[msg.<span class="property">sender</span>] -= amount;</span><br><span class="line">        balances[receiver] += amount;</span><br><span class="line">        emit <span class="title class_">Sent</span>(msg.<span class="property">sender</span>, receiver, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="读懂代码，能帮你规避很多归钱项目。">读懂代码，能帮你规避很多归钱项目。</h2>
<p>Solidity是以太坊虚拟机（EVM）智能合约的语言。同时，我也觉得solidity是玩链上项目必备的技能：区块链项目大部分是开源的，如果你能读懂代码，能帮你规避很多归钱项目。</p>
<p>Solidity具有两个特点：</p>
<ol>
<li>基于对象：学会之后，能帮你挣钱找对象。</li>
<li>高级：不会solidity，在币圈显得很low。</li>
</ol>
<h2 id="开发工具：remix">开发工具：remix</h2>
<p>本教程中，我会用remix来跑solidity合约。remix是以太坊官方推荐的智能合约开发IDE，适合新手，可以在浏览器中快速部署测试智能合约，你不需要在本地安装任何程序。</p>
<p>网址：<a href="https://remix.ethereum.org/">remix.ethereum.org</a></p>
<p>进入remix，我们可以看到最左边的菜单有三个按钮，分别对应文件（写代码的地方），编译（跑代码），部署（部署到链上）。我们点新建（Create New File）按钮，就可以创建一个空白的solidity合约。</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514144831541.png" alt="image-20220514144831541"></p>
<h3 id="我们拆开分析，学习solidity代码源文件的结构：">我们拆开分析，学习solidity代码源文件的结构：</h3>
<ol>
<li>第1行是注释，会写一下这个代码所用的软件许可（license），这里用的是MIT license。如果不写许可，编译时会警告（warning），但程序可以运行。solidity的注释由“//”开头，后面跟注释的内容（不会被程序运行）。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>第2行声明源文件所用的solidity版本，因为不同版本语法有差别。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.8.4;</span><br></pre></td></tr></table></figure>
<p>这行代码意思是源文件将不允许低于 0.8.4 版本的编译器编译。</p>
<ol start="3">
<li>第3-4行是合约部分，第3行创建合约（contract），并声明合约的名字 HelloWeb3。第4行是合约的内容，我们声明了一个string（字符串）变量_string，并给他赋值 “Hello Web3!”。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contract <span class="title class_">HelloWeb3</span>&#123; <span class="comment">// 定义一个HelloWeb3合约</span></span><br><span class="line">    string public _string = <span class="string">&quot;Hello Web3!&quot;</span>; <span class="comment">// public 公开可视</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以后我们会更细的介绍solidity中的变量。</p>
<h2 id="编译并部署代码">编译并部署代码</h2>
<p>在编辑代码的页面，按<strong>ctrl+S</strong>就可以编译代码，非常方便。</p>
<p>编译好之后，点击左侧菜单的“部署”按钮，进入部署页面。</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514150219994.png" alt="image-20220514150219994"></p>
<p>在默认情况下，remix会用JS虚拟机来模拟以太坊链，运行智能合约，类似在浏览器里跑一条测试链。并且remix会分配几个测试账户给你，每个里面有100 ETH（测试代币），可劲儿用。你点Deploy（黄色按钮），就可以部署咱们写好的合约了。</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514150319181.png" alt="image-20220514150319181"></p>
<p>部署成功后，你会在下面看到名为HELLOWEB3的合约，点击helloxx，就能看到我们代码中写的 “Hello Web3!” 了。</p>
<h2 id="constructor">constructor</h2>
<blockquote>
<p>初始化 在部署的时候调用</p>
</blockquote>
<h2 id="类型和值">类型和值</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line">contract <span class="title class_">ValueTypes</span>&#123;</span><br><span class="line"><span class="comment">//     string public helloxx = &quot;Hello Web3!&quot;;</span></span><br><span class="line">    bool public b = <span class="literal">true</span>; <span class="comment">// 布尔值</span></span><br><span class="line">    uint public u = <span class="number">123</span>; <span class="comment">// 无符号整数 0-256位整数 </span></span><br><span class="line">    <span class="comment">// uint256 0到2的256次方-1 </span></span><br><span class="line">    <span class="comment">// uint8   0到2的8次方-1</span></span><br><span class="line">    <span class="comment">// uit16   0到2的16次方-1</span></span><br><span class="line">    int public i = -<span class="number">123</span>; <span class="comment">// -2的255次方到2的255次方-1 一半负数一半真数</span></span><br><span class="line">    int public minInt = <span class="title function_">type</span>(int).<span class="property">min</span>;</span><br><span class="line">    int public maxInt = <span class="title function_">type</span>(int).<span class="property">max</span>;</span><br><span class="line">    address public addr = <span class="number">0x16e8575AEBe04f915FA0DADf6528662606296816</span>; <span class="comment">// 地址变量 address类型是一个160位的值，且不允许任何算数操作,适合存储合约地址或外部人员的密钥对</span></span><br><span class="line">    <span class="comment">// bytes32 public b32  = 32位;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="编写加减函数">编写加减函数</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line">contract <span class="title class_">FcuntionIntro</span>&#123;</span><br><span class="line">    <span class="comment">// external代表外部函数，只能在外部读取的函数</span></span><br><span class="line">    <span class="comment">// pure 表示纯函数 表示这个函数不能读写状态变量只能拥有局部变量 完全不能对链上有读写操作</span></span><br><span class="line">    <span class="comment">// return表示返回的类型</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params"> uint x,uint y </span>) external pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x + y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params"> uint x,uint y </span>) external pure returns (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> x - y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514153154628.png" alt="image-20220514153154628"></p>
<h2 id="状态变量、局部变量、全局变量、变量存储">状态变量、局部变量、全局变量、变量存储</h2>
<h3 id="状态变量">状态变量</h3>
<blockquote>
<p>状态变量是永久地存储在合约存储中的值</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.7</span>;</span><br><span class="line">contract <span class="title class_">State</span>&#123;</span><br><span class="line"></span><br><span class="line">    uint public i;</span><br><span class="line">    bool public b;</span><br><span class="line">    address public myAddress;</span><br><span class="line">    uint public myUint = <span class="number">123</span>;<span class="comment">// 状态变量：相当于把数据写入到区块链上面去 如果不写修改的方法那么他就永远的保存在链上了.</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        uint notState = <span class="number">456</span>; <span class="comment">// 非状态变量 这个变量只会在调用foo函数的时候才会在虚拟机的内存中产生</span></span><br><span class="line">        uint x = <span class="number">123</span>;</span><br><span class="line">        bool f = <span class="literal">false</span>; <span class="comment">// 此时 x y 是局部变量 只在函数的内部生效 并不会写入到区块链上</span></span><br><span class="line">        <span class="comment">// more code</span></span><br><span class="line">        x += <span class="number">456</span>;</span><br><span class="line">        f = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        i = <span class="number">123</span>;</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">        myAddress = <span class="title function_">address</span>(<span class="number">123</span>); <span class="comment">// 这个时候i、b、myAddress就会保存到链上 为状态变量 因为一开始在函数外面已经定义了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译运行一下</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514154624023.png" alt="image-20220514154624023"></p>
<p>可以看到，没运行foo的时候，<code>b</code>的变量、<code>i</code>的变量、<code>myAddress</code>的变量都为初始内容</p>
<p>当我们点击<code>foo</code>函数后</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514154735215.png" alt="image-20220514154735215"></p>
<p>这个时候值才会变化，写入链上</p>
<h3 id="变量存储">变量存储</h3>
<ol>
<li>
<p><code>storage</code>：合约里的状态变量默认都是<code>storage</code>，存储在链上。</p>
</li>
<li>
<p><code>memory</code>：函数里的参数和临时变量一般用<code>memory</code>，存储在内存中，不上链，适用于用它一次后就不用的变量。</p>
</li>
<li>
<p><code>calldata</code>：和<code>memory</code>类似，存储在内存中，不上链。与memory的不同点在于<code>calldata</code>变量不能修改（<code>immutable</code>），一般用于函数的参数。</p>
</li>
</ol>
<h3 id="全局变量">全局变量</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">blockhash</span>(uint blockNumber): (bytes32)给定区块的哈希值 – 只适用于<span class="number">256</span>最近区块, 不包含当前区块。</span><br><span class="line">block.<span class="property">coinbase</span>: (address payable) 当前区块矿工的地址</span><br><span class="line">block.<span class="property">gaslimit</span>: (uint) 当前区块的gaslimit</span><br><span class="line">block.<span class="property">number</span>: (uint) 当前区块的number</span><br><span class="line">block.<span class="property">timestamp</span>: (uint) 当前区块的时间戳，为unix纪元以来的秒</span><br><span class="line"><span class="title function_">gasleft</span>(): (uint256) 剩余 gas</span><br><span class="line">msg.<span class="property">data</span>: (bytes calldata) 完整call data</span><br><span class="line">msg.<span class="property">sender</span>: (address payable) 消息发送者地址 合约拥有者地址 (当前 caller)</span><br><span class="line">msg.<span class="property">sig</span>: (bytes4) calldata的前四个字节 (<span class="keyword">function</span> identifier)</span><br><span class="line">msg.<span class="property">value</span>: (uint) 当前交易发送的wei值</span><br><span class="line">now : (uint) 当前块的时间戳</span><br><span class="line">tx.<span class="property">origin</span> 相当于http中的referer 比如我self合约调用了aa合约 这个时候aa合约里的tx.<span class="property">origin</span>的地址就是我 或者理解为谁出了gas费，这个值就是谁</span><br></pre></td></tr></table></figure>
<h2 id="修饰符">修饰符</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">GlobalVars</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(address,uint,uint)</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">GlobalVars</span>(<span class="params"></span>) external pure <span class="title function_">returns</span>(address,uint,uint)</span><br><span class="line"><span class="comment">// 这个view和pure是修饰符</span></span><br><span class="line"><span class="comment">// view可以读链上信息 而 pure只能读局部信息或者干脆什么变量都没有</span></span><br><span class="line"><span class="comment">// 如果需要读链上变量 就用view 反而不用读链上读就用pure</span></span><br><span class="line"><span class="comment">// public 公开调用 合约内或合约外都可以</span></span><br></pre></td></tr></table></figure>
<h3 id="函数类型：">函数类型：</h3>
<p>函数类型是一种表示函数的类型。可以将一个函数赋值给另一个函数类型的变量，也可以将一个函数作为参数进行传递，还能在函数调用中返回函数类型变量。 函数类型有两类：- <em>内部（<strong>internal</strong>）</em> 函数和 <em>外部（<strong>external</strong>）</em> 函数：</p>
<p>内部函数只能在当前合约内被调用（更具体来说，在当前代码块内，包括内部库函数和继承的函数中），因为它们不能在当前合约上下文的外部被执行。 调用一个内部函数是通过跳转到它的入口标签来实现的，就像在当前合约的内部调用一个函数。</p>
<p>外部函数由一个地址和一个函数签名组成，可以通过外部函数调用传递或者返回。</p>
<p>函数类型表示成如下的形式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> (<span class="params">&lt;parameter types&gt;</span>) &#123;internal|external&#125; [pure|constant|view|payable] [returns (<span class="language-xml"><span class="tag">&lt;<span class="name">return</span> <span class="attr">types</span>&gt;</span>)]</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514165450783.png" alt="image-20220514165450783"></p>
<h2 id="可视范围">可视范围</h2>
<p>1、private</p>
<p>私有，表示只有在合约内部才可以使用</p>
<p>2、internal</p>
<p>内部，表示合约的内部和继承的子合约可使用</p>
<p>3、public</p>
<p>公开，在哪儿都看得到</p>
<p>4、external</p>
<p>外部，仅在合约外部可视，内部看不到</p>
<p>合约理解成代码吧</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220518195535252.png" alt="image-20220518195535252"></p>
<h2 id="常量">常量</h2>
<p>首先我们要知道什么是<code>gas</code></p>
<p><a href="https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html?highlight=gas#gas">https://solidity-cn.readthedocs.io/zh/develop/introduction-to-smart-contracts.html?highlight=gas#gas</a></p>
<blockquote>
<p>一经创建，每笔交易都收取一定数量的 <em><strong>*gas*</strong></em> ，目的是限制执行交易所需要的工作量和为交易支付手续费。EVM 执行交易时，<strong>gas</strong> 将按特定规则逐渐耗尽。</p>
<p><strong><em>*gas*</em> price</strong> 是交易发送者设置的一个值，发送者账户需要预付的手续费= <code>gas_price * gas</code> 。如果交易执行后还有剩余， <strong>gas</strong> 会原路返还。</p>
<p>无论执行到什么位置，一旦 <strong>gas</strong> 被耗尽（比如降为负值），将会触发一个 out-of-gas 异常。当前调用帧（call frame）所做的所有状态修改都将被回滚。</p>
</blockquote>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514201446619.png" alt="image-20220514201446619"></p>
<p>如果一个变量不需要修改的话最好定义为<code>constant</code>常量，这样子消耗的<code>gas</code>会比较少</p>
<h2 id="条件判断">条件判断</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.7</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">IfElse</span>&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params">uint _x</span>) external pure <span class="title function_">returns</span>(<span class="params"> uint </span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ( _x &lt; <span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> ( _x &lt; <span class="number">20</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">ternary</span>(<span class="params"> uint _y </span>) external pure <span class="title function_">returns</span>(<span class="params"> uint </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> _y == <span class="number">10</span>  ? <span class="number">1</span> : <span class="number">2</span>; <span class="comment">// 三元表达式 如果y为10就返回1 如果不为10就返回2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="循环">循环</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity &gt;=<span class="number">0.7</span><span class="number">.0</span> &lt;<span class="number">0.9</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">ForAndWhileLoops</span>&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loops</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        <span class="keyword">for</span> ( uint i = <span class="number">0</span> ; i &lt; <span class="number">10</span>; i++ )&#123;</span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">2</span> )&#123;</span><br><span class="line">                <span class="keyword">continue</span>; <span class="comment">// 跳出这个循环 执行more code区块内容</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// more code</span></span><br><span class="line">            <span class="keyword">if</span> ( i == <span class="number">5</span> )&#123;</span><br><span class="line">                <span class="keyword">break</span>; <span class="comment">// 彻底跳出循环 等于5后不会再次运行more code代码</span></span><br><span class="line">            &#125;</span><br><span class="line">            uint j = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> ( <span class="literal">true</span> )</span><br><span class="line">            &#123;</span><br><span class="line">                j++;</span><br><span class="line">                <span class="keyword">if</span> ( j &gt; <span class="number">100</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是要注意在区块链开发中，少用循环多的变量，因为这会消耗很多<code>gas</code></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220514205425893.png" alt="image-20220514205425893"></p>
<h2 id="报错控制">报错控制</h2>
<p><code>assert(bool condition)</code>:</p>
<p>如果条件不满足，则使当前交易没有效果 — 用于检查内部错误。</p>
<p><code>require(bool condition)</code>:</p>
<p>如果条件不满足则撤销状态更改 - 用于检查由输入或者外部组件引起的错误。</p>
<p><code>require(bool condition, string message)</code>:</p>
<p>如果条件不满足则撤销状态更改 - 用于检查由输入或者外部组件引起的错误，可以同时提供一个错误消息。</p>
<p><code>revert()</code>:</p>
<p>终止运行并撤销状态更改。</p>
<p><code>revert(string reason)</code>:</p>
<p>终止运行并撤销状态更改，可以同时提供一个解释性的字符串。</p>
<h3 id="但是如果报错的信息多的时候会浪费很多gas">但是如果报错的信息多的时候会浪费很多gas</h3>
<p>如</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">TryTest</span>&#123;</span><br><span class="line">    uint public num = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">TestRequire</span>(<span class="params"></span>) public&#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">require</span>(num &lt;= <span class="number">5</span>,<span class="string">&quot;num&lt;=5 error.........&quot;</span>); <span class="comment">// num大于等于5的时候提示num&lt;=5 error.....</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个时候<code>num&lt;=5 error.........</code>的内容可能会很多 导致<code>gas</code>的浪费，我们可以自定义报错内容</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">TryTest</span>&#123;</span><br><span class="line">    uint public num = <span class="number">1</span>;</span><br><span class="line">    error <span class="title class_">MyError</span>(address caller, uint n);</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">TestRequire</span>(<span class="params"></span>) public&#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> ( num &gt; <span class="number">10</span> )</span><br><span class="line">        &#123;</span><br><span class="line">            revert <span class="title class_">MyError</span>(msg.<span class="property">sender</span>,num); <span class="comment">//num大于10的时候返回地址信息和num值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数修改器">函数修改器</h2>
<blockquote>
<p>使复用的代码简用</p>
</blockquote>
<h3 id="无传参修改器">无传参修改器</h3>
<p>比如我们有一个功能要验证这个合约是否还在使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">FunctionModifier</span>&#123;</span><br><span class="line">    bool public paused;</span><br><span class="line">    uint public num;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SetPaused</span>(<span class="params"> bool _paused </span>) external &#123;</span><br><span class="line">        paused = _paused;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Addnum</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        <span class="built_in">require</span>(!paused,<span class="string">&quot;paused&quot;</span>); <span class="comment">// 验证合约是否还在使用</span></span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Decnum</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        <span class="built_in">require</span>(!paused,<span class="string">&quot;paused&quot;</span>); <span class="comment">// 验证合约是否还在使用</span></span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515151308020.png" alt="image-20220515151308020"></p>
<p>这里将<code>paused</code>设为<code>true</code>的时候就会报错不在运行后面的加减<code>count</code>的代码了</p>
<p>这样子代码量会比较多，我们可以用<code>modifier</code>修改器来简化代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">FunctionModifier</span>&#123;</span><br><span class="line">    bool public paused;</span><br><span class="line">    uint public num;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SetPaused</span>(<span class="params"> bool _paused </span>) external &#123;</span><br><span class="line">        paused = _paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title class_">MyModifier</span>()&#123;</span><br><span class="line">        <span class="built_in">require</span>(!paused,<span class="string">&quot;paused&quot;</span>); <span class="comment">// 验证合约是否还在使用</span></span><br><span class="line">        _; <span class="comment">// 更多代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Addnum</span>(<span class="params"></span>) external <span class="title class_">MyModifier</span>&#123;</span><br><span class="line">        num += <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Decnum</span>(<span class="params"></span>) external <span class="title class_">MyModifier</span>&#123;</span><br><span class="line">        num -= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意这里的<code>_;</code>的意思为</p>
<p>如<code>Addnum()</code>函数调用了这个<code>MyModifier()</code>，但是我<code>Addnum()</code>后面还有一串代码<code>num += 1</code>，那么这个时候<code>_;</code>就代表<code>num+=1</code>这串代码甚至更多，就是让被调用这串代码的函数下面的代码继续执行。</p>
<h3 id="传参修改器">传参修改器</h3>
<p>顾名思义，带参数验证的修改器</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">FunctionModifier</span>&#123;</span><br><span class="line">    bool public paused;</span><br><span class="line">    uint public num;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SetPaused</span>(<span class="params"> bool _paused </span>) external &#123;</span><br><span class="line">        paused = _paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title class_">MyModifier</span>()&#123;</span><br><span class="line">        <span class="built_in">require</span>(!paused,<span class="string">&quot;paused&quot;</span>); <span class="comment">// 验证合约是否还在使用</span></span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title class_">CheckNum</span>(uint _x)&#123;</span><br><span class="line">        <span class="built_in">require</span>(_x&lt;<span class="number">10</span>,<span class="string">&quot;_x&lt;10&quot;</span>); <span class="comment">// 如果传入的_x大于10则提示错误信息_x&lt;10</span></span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Addnum</span>(<span class="params"> uint _x </span>) external <span class="title class_">MyModifier</span> <span class="title class_">CheckNum</span>( _x )&#123;</span><br><span class="line">        num += _x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515152738856.png" alt="image-20220515152738856"></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515152808183.png" alt="image-20220515152808183"></p>
<h3 id="三明治修改器">三明治修改器</h3>
<blockquote>
<p>让代码运行过程变成 -&gt; 先调用修改器 -&gt; 运行调用修改器的函数代码 -&gt; 再运行后面的修改器代码</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">FunctionModifier</span>&#123;</span><br><span class="line">    bool public paused;</span><br><span class="line">    uint public num;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SetPaused</span>(<span class="params"> bool _paused </span>) external &#123;</span><br><span class="line">        paused = _paused;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title function_">sandwich</span>(<span class="params"></span>)&#123;</span><br><span class="line">        num += <span class="number">10</span>;</span><br><span class="line">        _;</span><br><span class="line">        num *= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Decnum</span>(<span class="params"> </span>) external <span class="title function_">sandwich</span>(<span class="params"></span>)&#123;</span><br><span class="line">        num -= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Decnum</span>(<span class="params"> </span>) external <span class="title function_">sandwich</span>(<span class="params"></span>)&#123;</span><br><span class="line">    num += <span class="number">10</span>;</span><br><span class="line">    num -= <span class="number">10</span>;</span><br><span class="line">    num *= <span class="number">10</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>代码一致，先运行<code>num += 10</code>，在运行<code>;_</code>相当于<code>Decnum()</code>里的<code>num -= 10</code>，在运行<code>num *= 10</code></p>
<h2 id="构造函数">构造函数</h2>
<blockquote>
<p>构造函数初始化一些变量</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">Constructor</span>&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint public age;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"> uint _age </span>)</span><br><span class="line">    &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">        age = _age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515154144381.png" alt="image-20220515154144381"></p>
<h2 id="做一个简单的函数控制合约">做一个简单的函数控制合约</h2>
<blockquote>
<p>经过这个案例我才明白 原来合约的代码运行后就会一直在区块中运行 不能更改…</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line">contract <span class="title class_">Owanable</span>&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>; <span class="comment">// 定义合约拥有者的地址</span></span><br><span class="line">    &#125;</span><br><span class="line">    modifier <span class="title class_">CheckOwner</span>()&#123;</span><br><span class="line">        <span class="built_in">require</span>( msg.<span class="property">sender</span> == owner,<span class="string">&quot;not owner&quot;</span> ); <span class="comment">// 如果是合约拥有者调用这个函数，否则提示not owner</span></span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">SetOwner</span>(<span class="params">address _NewOwner</span>) external <span class="title class_">CheckOwner</span> &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> != <span class="title function_">address</span>(<span class="number">0</span>),<span class="string">&quot;address 0!!&quot;</span>); <span class="comment">// 如果地址不为0，执行下面代码，否则提示adderss 0!!</span></span><br><span class="line">        owner = _NewOwner; <span class="comment">// 修改管理员为_NewOwner</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">OnlyOwner</span>(<span class="params"></span>) external <span class="title class_">CheckOwner</span>()&#123;</span><br><span class="line">        <span class="comment">// 只有管理员（合约拥有者）可以调用的函数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">All</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        <span class="comment">// 所有人都可以调用的函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>1、我们先用地址<code>0x9F95694763DF905d0b778CcDE75358FA88121B58</code>来运行合约</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515161051553.png" alt="image-20220515161051553"></p>
<p>这个时候不管全部人都可以调用的函数还是只有管理员可以调用的函数我都可以运行</p>
<p>2、切换地址后运行</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515161141028.png" alt="image-20220515161141028"></p>
<p>就会提示<code>not owner</code>，那我用部署合约地址的地址来为更换后的地址设为<code>owner</code></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515161355283.png" alt="image-20220515161355283"></p>
<p>然后就可以运行了，简单的一个<code>Demo</code></p>
<h2 id="console-sol推荐">console.sol推荐</h2>
<p>这是一个可以方便看到变量值的功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Owanable</span>&#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint public u = <span class="number">123</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)&#123;</span><br><span class="line">        owner = msg.<span class="property">sender</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">printu</span>(<span class="params"></span>) external view&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is u:&#x27;</span>,u);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;this is address:&#x27;</span>,owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515162911111.png" alt="image-20220515162911111"></p>
<h2 id="函数返回值">函数返回值</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnMany</span>(<span class="params"></span>) public pure <span class="title function_">returns</span>(<span class="params"> uint,bool </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>); <span class="comment">// 这是一种返回办法</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnManys</span>(<span class="params"></span>) public pure <span class="title function_">returns</span>(<span class="params"> uint u,bool b </span>)&#123; <span class="comment">// 这是隐式返回 u和b在这里定义了返回代码中定义值即可</span></span><br><span class="line">        u = <span class="number">123</span>;</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>合约接收返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnMany</span>(<span class="params"></span>) public pure <span class="title function_">returns</span>(<span class="params"> uint,bool </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>(<span class="number">1</span>,<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnManys</span>(<span class="params"></span>) public pure <span class="title function_">returns</span>(<span class="params"> uint u,bool b </span>)&#123;</span><br><span class="line">        u = <span class="number">123</span>;</span><br><span class="line">        b = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">catReturn</span>(<span class="params"></span>) public view&#123;</span><br><span class="line">        (uint u,bool b1) = <span class="title function_">returnManys</span>(); <span class="comment">// 接收2个返回值分别定义为u和b1</span></span><br><span class="line">        (,bool b2) = <span class="title function_">returnManys</span>(); <span class="comment">// 如果只接收这个函数的第二个返回值，只要前面留个逗号即可</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b1:&#x27;</span>,b1,<span class="string">&#x27;b2:&#x27;</span>,b2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515163828912.png" alt="image-20220515163828912"></p>
<h2 id="数组">数组</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">uint [] public list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>];</span><br><span class="line">uint [<span class="number">3</span>] public listFixed = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">// 定长数组 长度是固定好的 不能更改</span></span><br></pre></td></tr></table></figure>
<h3 id="对数组增删改查">对数组增删改查</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">    uint [] public list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]; <span class="comment">// 动态数组，没有长度限制</span></span><br><span class="line">    uint [<span class="number">3</span>] public listFixed = [<span class="number">6</span>,<span class="number">3</span>,<span class="number">1</span>];<span class="comment">// 定长数组 长度是固定好的 不能更改</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">examples</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        list.<span class="title function_">push</span>(<span class="number">8</span>); <span class="comment">// 增加数组8  [1,2,3,8]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list[2]&quot;</span>,list[<span class="number">2</span>]); <span class="comment">// 数组的索引从0开始算 list[0] 为 1 list[1] 为 2</span></span><br><span class="line">        list[<span class="number">2</span>] = <span class="number">666</span>; <span class="comment">// 修改第二个索引值为666 [1,2,666,8]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list[2]&quot;</span>,list[<span class="number">2</span>]); <span class="comment">// </span></span><br><span class="line">        <span class="keyword">delete</span> list[<span class="number">2</span>]; <span class="comment">// 删除数组索引为2的内容，这里删除只是变成了默认数字0 [1,2,0,8]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list[2]&quot;</span>,list[<span class="number">2</span>]); </span><br><span class="line">        list.<span class="title function_">pop</span>(); <span class="comment">// 弹出最后一个索引内容，数组变成 [1,2,0]</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;list.length:&quot;</span>,list.<span class="property">length</span>); <span class="comment">// length获取数组的长度 </span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个数组在内存中，内存中不能定义动态数组 所以不能使用pop push这种改变长度的值</span></span><br><span class="line">        uint[] memory mlist = <span class="keyword">new</span> uint[](<span class="number">5</span>); <span class="comment">// 定义一个长度5的数组放在内存中 </span></span><br><span class="line">        mlist[<span class="number">1</span>] = <span class="number">666</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnArray</span>(<span class="params"></span>) external view returns ( uint[] memory )&#123; <span class="comment">// 用函数返回数组内容</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515165848012.png" alt="image-20220515165848012"></p>
<h3 id="彻底删除">彻底删除~</h3>
<p>但是这里的<code>delete</code>只是将数组的索引变成0，并不是我们要的删掉索引，所以我们这里可以用这个办法，先看图</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515173316931.png" alt="image-20220515173316931"></p>
<p>实现代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">    uint [] public list = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]; <span class="comment">// 动态数组，没有长度限制</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">removeArrayIndex</span>(<span class="params"> uint _index </span>) public&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;list.length:&#x27;</span>,list.<span class="property">length</span>);</span><br><span class="line">        <span class="built_in">require</span>( _index &lt; list.<span class="property">length</span>,<span class="string">&quot;_index &lt; lenght&quot;</span> ); <span class="comment">// 不允许索引比数组大</span></span><br><span class="line">        <span class="comment">// [1,2,3] remove(1) -&gt; [1,3]</span></span><br><span class="line">        <span class="keyword">for</span> ( uint i = _index; i &lt; list.<span class="property">length</span> - <span class="number">1</span>; i++ )</span><br><span class="line">        &#123;</span><br><span class="line">            list[i] = list[i+<span class="number">1</span>]; <span class="comment">// 让数组向右替换</span></span><br><span class="line">        &#125;</span><br><span class="line">        list.<span class="title function_">pop</span>(); <span class="comment">// 然后弹出最后一个</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">returnArray</span>(<span class="params"></span>) external view returns ( uint[] memory )&#123; <span class="comment">// 用函数返回数组内容</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515173406579.png" alt="image-20220515173406579"></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515173456751.png" alt="image-20220515173456751"></p>
<p>但是，这种会很浪费<code>gas</code>，如果数组长度多的话<code>gas</code>消耗非常多</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515173820172.png" alt="image-20220515173820172"></p>
<p>两百多万的<code>gas</code> <em>不学了 玩毛线</em>（开玩笑…）</p>
<p>如果不对数组顺序有要求，又想节约<code>gas</code>可以使用下面这段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">list[_index] = list[list.<span class="property">length</span> - <span class="number">1</span>]; <span class="comment">// 把最后一个索引元素替换为当前索引的元素内容</span></span><br><span class="line">list.<span class="title function_">pop</span>(); <span class="comment">// 最后弹出最后一个元素</span></span><br></pre></td></tr></table></figure>
<h2 id="映射">映射</h2>
<blockquote>
<p>Key =&gt; Value 理解为其他语言的字典</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">   <span class="title function_">mapping</span>( <span class="function"><span class="params">address</span> =&gt;</span> uint ) public balances; <span class="comment">// 账本映射 功能是输入一个地址 就让他返回一个余额回来</span></span><br><span class="line">   <span class="title function_">mapping</span>( <span class="function"><span class="params">address</span> =&gt;</span> <span class="title function_">mapping</span>(<span class="function"><span class="params">address</span> =&gt;</span> bool) ) public isFriend;</span><br><span class="line">   uint public aaa;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) external returns (uint)&#123;</span><br><span class="line">       balances[msg.<span class="property">sender</span>] = <span class="number">123</span>; <span class="comment">// 表示balances地址的余额设置为123</span></span><br><span class="line">       uint uadd = balances[msg.<span class="property">sender</span>]; <span class="comment">// 获取映射里的地址数据</span></span><br><span class="line">       uint uadd2 = balances[<span class="title function_">address</span>(<span class="number">1</span>)]; <span class="comment">// 如果地址不存在设置过值那么他的uint会是默认值</span></span><br><span class="line">       <span class="keyword">delete</span> balances[msg.<span class="property">sender</span>]; <span class="comment">//删除映射的值（将它值变成默认值0）</span></span><br><span class="line"></span><br><span class="line">       isFriend[msg.<span class="property">sender</span>][<span class="title function_">address</span>(<span class="variable language_">this</span>)] = <span class="literal">true</span>; <span class="comment">// 将isFriend里的地址中的地址的布尔值修改为true</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>数组要遍历才能找到他的数据，映射可以直接找，但映射不能遍历</strong></p>
<p><strong>那么我们想要一个既能遍历又能直接找到他的内容是否存在映射 可以把数组的特性和映射结合</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">   <span class="title function_">mapping</span>( <span class="function"><span class="params">address</span> =&gt;</span> uint ) public balances; </span><br><span class="line">   <span class="title function_">mapping</span>( <span class="function"><span class="params">address</span> =&gt;</span> bool ) public <span class="title class_">IsBool</span>;</span><br><span class="line">   address [] public keys;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Set</span>(<span class="params"> address _a, uint _i </span>) external&#123;</span><br><span class="line">       balances[_a] = _i; <span class="comment">// 将balances的地址_a设置映射值为_i</span></span><br><span class="line">       <span class="keyword">if</span> ( !<span class="title class_">IsBool</span>[_a] )&#123; <span class="comment">// 判断IsBool的地址_a是否为true 不为true则表示他没有赋值过 表示不允许重复新增</span></span><br><span class="line">            <span class="title class_">IsBool</span>[_a] = <span class="literal">true</span>; <span class="comment">// 将它的bool设为true</span></span><br><span class="line">            keys.<span class="title function_">push</span>( _a ); <span class="comment">// 并且把这个地址加入到数组</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取“映射”长度</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">GetLength</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params"> uint </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> keys.<span class="property">length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 获取映射中对应“索引”的内容</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"> uint _index </span>) external view <span class="title function_">returns</span>(<span class="params"> uint </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[keys[_index]];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查看keys地址数组的内容</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">catArray</span>(<span class="params"></span>) external view <span class="title function_">returns</span>(<span class="params"> address[] memory </span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> keys;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515212940288.png" alt="image-20220515212940288"></p>
<p>很精妙的逻辑和合理！</p>
<h2 id="结构体">结构体</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./console.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">   struct <span class="title class_">Car</span> &#123; <span class="comment">// 构造一个结构体</span></span><br><span class="line">       string model; <span class="comment">// 汽车名</span></span><br><span class="line">       uint year; <span class="comment">// 年份</span></span><br><span class="line">       address owner; <span class="comment">// 拥有者</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title class_">Car</span> public car; <span class="comment">// 用定义的结构体为变量</span></span><br><span class="line">   <span class="title class_">Car</span>[] public carlist; <span class="comment">// 用定义的结构体为数组</span></span><br><span class="line">   mapping ( <span class="function"><span class="params">address</span> =&gt;</span> <span class="title class_">Car</span>[] ) public carsByOwner; <span class="comment">// 一个人可以拥有很多辆车，所以这里把地址对应了结构体</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">examples</span>(<span class="params"></span>) external&#123;</span><br><span class="line">       <span class="comment">// memory意思是定义到内存中 合约结束后会销毁</span></span><br><span class="line">       <span class="title class_">Car</span> memory lbjn = <span class="title class_">Car</span>(<span class="string">&quot;lbjn&quot;</span>,<span class="number">2022</span>,msg.<span class="property">sender</span>); <span class="comment">// 定义一个兰博基尼的名字和年份和他的拥有者</span></span><br><span class="line">       <span class="title class_">Car</span> memory fll = <span class="title class_">Car</span>(<span class="string">&quot;fll&quot;</span>,<span class="number">2021</span>,msg.<span class="property">sender</span>); <span class="comment">// 法拉利</span></span><br><span class="line">       <span class="title class_">Car</span> memory tesla; <span class="comment">// 还可以用这种办法定义一个特斯拉的信息</span></span><br><span class="line">       tesla.<span class="property">model</span> = <span class="string">&quot;tesla&quot;</span>;</span><br><span class="line">       tesla.<span class="property">year</span>  = <span class="number">2000</span>;</span><br><span class="line">       tesla.<span class="property">owner</span> = msg.<span class="property">sender</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 将结构体内容添加入数组</span></span><br><span class="line">       carlist.<span class="title function_">push</span>( lbjn ); </span><br><span class="line">       carlist.<span class="title function_">push</span>( fll );</span><br><span class="line">       carlist.<span class="title function_">push</span>( tesla );</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 直接将结构体的格式推入到数组中</span></span><br><span class="line">       carlist.<span class="title function_">push</span>(<span class="title class_">Car</span>(<span class="string">&quot;bwm&quot;</span>,<span class="number">2011</span>,msg.<span class="property">sender</span>));</span><br><span class="line">       <span class="comment">// 那我们要获取这个结构体的内容就可以下面这种方法</span></span><br><span class="line">       <span class="title class_">Car</span> storage _car = carlist[<span class="number">0</span>];</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.model:&quot;</span>,_car.<span class="property">model</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.year:&quot;</span>,_car.<span class="property">year</span>);</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.owner:&quot;</span>,_car.<span class="property">owner</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改年份</span></span><br><span class="line">        _car.<span class="property">year</span> = <span class="number">1111</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.year:&quot;</span>,_car.<span class="property">year</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除结构体year值</span></span><br><span class="line">        <span class="keyword">delete</span> _car.<span class="property">year</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.year:&quot;</span>,_car.<span class="property">year</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除整个结构体值 就是删除这个数组索引的全部内容</span></span><br><span class="line">        <span class="keyword">delete</span> carlist[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.model:&quot;</span>,_car.<span class="property">model</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.year:&quot;</span>,_car.<span class="property">year</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;_car.owner:&quot;</span>,_car.<span class="property">owner</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220515222808436.png" alt="image-20220515222808436"></p>
<h2 id="枚举">枚举</h2>
<p>枚举将一个变量的取值限制为几个<strong>预定义值</strong>中的一个。精确使用枚举类型有助于减少代码中的bug。</p>
<p>实例</p>
<blockquote>
<p>考虑一个鲜榨果汁商店的应用程序，将玻璃杯的容量大小限制为：小、中、大。这将确保任何人不能购买其他容量的果汁。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">contract test &#123;</span><br><span class="line">   enum <span class="title class_">FreshJuiceSize</span>&#123; <span class="variable constant_">SMALL</span>, <span class="variable constant_">MEDIUM</span>, <span class="variable constant_">LARGE</span> &#125;</span><br><span class="line">   <span class="title class_">FreshJuiceSize</span> choice;</span><br><span class="line">   <span class="title class_">FreshJuiceSize</span> constant defaultChoice = <span class="title class_">FreshJuiceSize</span>.<span class="property">MEDIUM</span>; <span class="comment">// 这个值的内容就是1 表示FreshJuiceSize.MEDIUM的索引位</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">setLarge</span>(<span class="params"></span>) public &#123;</span><br><span class="line">      choice = <span class="title class_">FreshJuiceSize</span>.<span class="property">LARGE</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">setMedium</span>(<span class="params"></span>) public &#123;</span><br><span class="line">      choice = <span class="title class_">FreshJuiceSize</span>.<span class="property">MEDIUM</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">setSmall</span>(<span class="params"></span>) public &#123;</span><br><span class="line">      choice = <span class="title class_">FreshJuiceSize</span>.<span class="property">SMALL</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getChoice</span>(<span class="params"></span>) public view returns (<span class="title class_">FreshJuiceSize</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> choice;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">getDefaultChoice</span>(<span class="params"></span>) public pure returns (uint) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="title function_">uint</span>(defaultChoice);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行<code>setLarge()</code>后<code>getChoice()</code>的结果就是<strong>2</strong></p>
<p>执行<code>setMedium()</code>后<code>getChoice()</code>的结果就是<strong>1</strong></p>
<p>执行<code>setSmall()</code>后<code>getChoice()</code>的结果就是<strong>0</strong></p>
<p><code>getChoice()</code>的返回内容对应的是<strong>索引位</strong></p>
<h2 id="部署合约">部署合约</h2>
<p>通过合约去部署合约</p>
<blockquote>
<p>因为合约部署上去是不能在改代码的 所以有时候我们可能要更改他的owner（理解为管理员地址）就要使用这种动态修改”代码“的办法去实现</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Proxy</span> &#123;</span><br><span class="line">    event <span class="title class_">Deploy</span>(address);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">fallback</span>() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">deploy</span>(<span class="params">bytes memory _code</span>) external payable returns (address addr) &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            <span class="comment">// create(v, p, n)</span></span><br><span class="line">            <span class="comment">// v = amount of ETH to send</span></span><br><span class="line">            <span class="comment">// p = pointer in memory to start of code</span></span><br><span class="line">            <span class="comment">// n = size of code</span></span><br><span class="line">            addr := <span class="title function_">create</span>(<span class="title function_">callvalue</span>(), <span class="title function_">add</span>(_code, <span class="number">0x20</span>), <span class="title function_">mload</span>(_code)) <span class="comment">// 创建合约</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// return address 0 on error</span></span><br><span class="line">        <span class="built_in">require</span>(addr != <span class="title function_">address</span>(<span class="number">0</span>), <span class="string">&quot;deploy failed&quot;</span>);</span><br><span class="line"></span><br><span class="line">        emit <span class="title class_">Deploy</span>(addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">execute</span>(<span class="params">address _target, bytes memory _data</span>) external payable &#123;</span><br><span class="line">        (bool success, ) = _target.<span class="property">call</span>&#123;<span class="attr">value</span>: msg.<span class="property">value</span>&#125;(_data);</span><br><span class="line">        <span class="built_in">require</span>(success, <span class="string">&quot;failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TestContract1</span> &#123;</span><br><span class="line">    address public owner = msg.<span class="property">sender</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setOwner</span>(<span class="params">address _owner</span>) public &#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;not owner&quot;</span>);</span><br><span class="line">        owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TestContract2</span> &#123;</span><br><span class="line">    address public owner = msg.<span class="property">sender</span>;</span><br><span class="line">    uint public value = msg.<span class="property">value</span>;</span><br><span class="line">    uint public x;</span><br><span class="line">    uint public y;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">uint _x, uint _y</span>) payable &#123;</span><br><span class="line">        x = _x;</span><br><span class="line">        y = _y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Helper</span> &#123; <span class="comment">// 助手合约</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getBytecode1</span>(<span class="params"></span>) external pure returns (bytes memory) &#123;</span><br><span class="line">        bytes memory bytecode = <span class="title function_">type</span>(<span class="title class_">TestContract1</span>).<span class="property">creationCode</span>; <span class="comment">// 返回TestContract1的原始代码 就是字节码</span></span><br><span class="line">        <span class="keyword">return</span> bytecode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getBytecode2</span>(<span class="params">uint _x, uint _y</span>) external pure returns (bytes memory) &#123;</span><br><span class="line">        bytes memory bytecode = <span class="title function_">type</span>(<span class="title class_">TestContract2</span>).<span class="property">creationCode</span>;</span><br><span class="line">        <span class="keyword">return</span> abi.<span class="title function_">encodePacked</span>(bytecode, abi.<span class="title function_">encode</span>(_x, _y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getCalldata</span>(<span class="params">address _owner</span>) external pure returns (bytes memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> abi.<span class="title function_">encodeWithSignature</span>(<span class="string">&quot;setOwner(address)&quot;</span>, _owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个看<strong>崔棉大师</strong>的26课，貌似很复杂这里详细分解一下</p>
<h3 id="1、首先我们部署助手合约Helper和代理合约Proxy">1、首先我们部署助手合约<code>Helper</code>和代理合约<code>Proxy</code></h3>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517220225712.png" alt="image-20220517220225712"></p>
<h3 id="2、现在我们要部署TestContract1，并且设置owner（修改管理员方法）">2、现在我们要部署<code>TestContract1</code>，并且设置<code>owner</code>（修改管理员方法）</h3>
<p>那么我们要先打开助手合约<code>Helper</code>的<code>getBytecode1()</code>函数</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517220431652.png" alt="image-20220517220431652"></p>
<p>可以看到获取了很多十六位进制的数字，它是<code>solidity</code>的原始代码，就是说你不管在<code>solidity</code>中写了什么代码，只要编译成功，它最终都会转换为<code>bytecode</code>十六位进制的数字</p>
<p>然后我们要把这个<code>bytecode</code>（也叫字节码）传入到代理合约中</p>
<p>![image-20220517220733206](F:\web3.0\web3.0 note\image-20220517220733206.png)</p>
<p>然后事件就会把这个部署的合约的地址输出出来</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517220849334.png" alt="image-20220517220849334"></p>
<p>然后我们选择合约为<code>TestContract1</code>并且把刚刚事件输出的合约地址放到这里，点击<code>At Address</code></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517220942762.png" alt="image-20220517220942762"></p>
<p>然后就有一个新合约冒出来（这个合约是直接加载出来的，不是编译运行的）</p>
<p>这个时候<code>TestContract1</code>的<code>owner</code>（管理员）就是代理合约(<code>Proxy</code>)的地址</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517221242453.png" alt="image-20220517221242453"></p>
<p>这个时候我们想把<code>owner</code>（管理员）改成我们自己的地址，我们直接改是肯定不行的，因为这里代码进行了验证</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(msg.<span class="property">sender</span> == owner, <span class="string">&quot;not owner&quot;</span>);</span><br></pre></td></tr></table></figure>
<p>所以我们要通过代理合约<code>Proxy</code>来更改管理员地址</p>
<p>我们需要借助到助手合约<code>Helper</code>里的<code>getCalldata</code>函数，将我们的地址传入进去</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517221813527.png" alt="image-20220517221813527"></p>
<p>返回的内容是<code>0x13af4035000000000000000000000000cf236e14cbb6a14f854f336f97ea5928415dd7c6</code></p>
<p>然后我们要去调用代理合约<code>Proxy</code>里的<code>execute()</code>函数，第一个参数是我们测试合约<code>Testcontract1</code>的地址，第二个参数是刚刚调用<code>getCalldata</code>返回的编码内容</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517222402631.png" alt="image-20220517222402631"></p>
<p>执行<code>execute</code>成功后，测试合约的<code>Testcontract1</code>的<code>owner</code>地址就变成我的地址了</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517222449170.png" alt="image-20220517222449170"></p>
<h3 id="3、获取Testcontract2合约的字节码">3、获取<code>Testcontract2</code>合约的字节码</h3>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517222719465.png" alt="image-20220517222719465"></p>
<p>然后把<code>Testcontract2</code>合约加载进来</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517222957054.png" alt="image-20220517222957054"></p>
<p><code>At Address</code>依旧是事件中返回的<code>Testcontract2</code>合约地址</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517223100163.png" alt="image-20220517223100163"></p>
<p>然后这个合约就被加载进来了</p>
<h2 id="存储位置">存储位置</h2>
<h3 id="storage">storage</h3>
<blockquote>
<p>状态变量，可以修改他的数据也可以读，永久记录在链上，不设置存储位置的话solidity默认的就是storage</p>
</blockquote>
<h3 id="memory">memory</h3>
<blockquote>
<p>存储在内存上的值，他也能修改但是他在函数调用过后就会消失，并不会记录在链上，理解为局部变量</p>
<p>比如那些只用一两次的变量可以用这个定义</p>
</blockquote>
<h3 id="calldata">calldata</h3>
<blockquote>
<p>只能用在输入参数中定义，他和memory类似</p>
<p>用它的场景在 传递的参数且不上链的变量 因为他可以节省gas</p>
</blockquote>
<p>输入同样的参数<code>memory</code>比<code>calldata</code>多消耗<code>gas</code></p>
<h2 id="案例-代办事项">案例-代办事项</h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">TodoList</span>&#123;</span><br><span class="line">    struct <span class="title class_">Todo</span>&#123;</span><br><span class="line">        string name; <span class="comment">// 代办事项名</span></span><br><span class="line">        bool completed; <span class="comment">// 是否已完成</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Todo</span>[] public todos;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params"> string calldata _name </span>) external &#123; <span class="comment">// 代办事项</span></span><br><span class="line">        todos.<span class="title function_">push</span>(<span class="title class_">Todo</span>(&#123;</span><br><span class="line">            <span class="attr">name</span>:_name,</span><br><span class="line">            <span class="attr">completed</span>:<span class="literal">false</span> <span class="comment">// 默认是false</span></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateName</span>(<span class="params"> uint _index, string calldata _name </span>) external &#123;</span><br><span class="line">        todos[_index].<span class="property">name</span> = _name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">get</span>(<span class="params"> uint _index </span>) external view <span class="title function_">returns</span>(<span class="params"> string memory name,bool </span>)&#123;</span><br><span class="line">        <span class="title class_">Todo</span> storage todo = todos[_index];</span><br><span class="line">        <span class="keyword">return</span> ( todo.<span class="property">name</span>,todo.<span class="property">completed</span> );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">toggleCompleted</span>(<span class="params"> uint _index </span>) external &#123;</span><br><span class="line">        todos[_index].<span class="property">completed</span> = !todos[_index].<span class="property">completed</span>; <span class="comment">// true变false false变true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="事件">事件</h2>
<blockquote>
<p>他保存的数据不会记录在状态变量中而是体现在状态变量中，或者是交易记录中的log里</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Test</span>&#123;</span><br><span class="line">    event <span class="title class_">Log</span>(string name,uint val); <span class="comment">// 定义要报告啥</span></span><br><span class="line">    event <span class="title class_">IndexedLog</span>( address indexed sender, uint256 val ); </span><br><span class="line">    <span class="comment">// 在一个事件中可以汇报很多的信息 但是在有索引的事件中只能定义三个</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">example</span>(<span class="params"></span>) external&#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;ctl&quot;</span>,<span class="number">200</span>); <span class="comment">// 报告ctl,200</span></span><br><span class="line">        emit <span class="title class_">IndexedLog</span>(msg.<span class="property">sender</span>,<span class="number">888</span>); <span class="comment">// a用户调用sender就是a b用户调用就是b</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    event <span class="title class_">Message</span>( address indexed _from, address indexed _to, string message );</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params"> address _to, string calldata message </span>) external&#123;</span><br><span class="line">        emit <span class="title class_">Message</span>(msg.<span class="property">sender</span>,_to,message); <span class="comment">// 触发发送信息事件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220518175058788.png" alt="image-20220518175058788"></p>
<h2 id="继承">继承</h2>
<p>a合约继承b合约功能</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Acontract</span>&#123;</span><br><span class="line">    <span class="comment">// virtual表示这个合约可以被重写</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) external pure virtual returns ( string memory )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A1()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) external pure virtual returns ( string memory )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B1()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) external pure virtual returns ( string memory )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;C1()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">contract <span class="title class_">Bcontract</span> is <span class="title class_">Acontract</span>&#123; <span class="comment">// 表示继承Acontract合约</span></span><br><span class="line">    <span class="comment">// override表示重写继承Acontract合约的A函数和B函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">A</span>(<span class="params"></span>) external pure override returns ( string memory )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;A2()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">B</span>(<span class="params"></span>) external pure override returns ( string memory )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;B2()&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220518175819893.png" alt="image-20220518175819893"></p>
<h3 id="多线继承">多线继承</h3>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">   A</span><br><span class="line">  / \</span><br><span class="line"> B   C</span><br><span class="line">  \ /</span><br><span class="line">   D</span><br><span class="line">这个表示b和c合约继承a，d合约继承b和c</span><br><span class="line">这个继承是有顺序的，要先继承基础的合约在继承派生合约</span><br><span class="line">就是继承最少的合约要在继承多的合约后面继承</span><br><span class="line"></span><br><span class="line">举个例子，比如Y合约继承了A合约 X合约没有继承合约 那么现在有个D合约要继承Y和X 就必须先继承X在继承Y</span><br><span class="line">contract Y is X&#123; more code... &#125;</span><br><span class="line">contract D is X,Y&#123; more code... &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Inheritance tree</span></span><br><span class="line"><span class="comment">   A</span></span><br><span class="line"><span class="comment">  / \</span></span><br><span class="line"><span class="comment"> B   C</span></span><br><span class="line"><span class="comment">  \ /</span></span><br><span class="line"><span class="comment">   D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    <span class="comment">// This is called an event. You can emit events from your function</span></span><br><span class="line">    <span class="comment">// and they are logged into the transaction log.</span></span><br><span class="line">    <span class="comment">// In our case, this will be useful for tracing function calls.</span></span><br><span class="line">    event <span class="title class_">Log</span>(string message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.foo called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.bar called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract B is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D is B, C &#123;</span><br><span class="line">    <span class="comment">// Try:</span></span><br><span class="line">    <span class="comment">// - Call D.foo and check the transaction logs.</span></span><br><span class="line">    <span class="comment">//   Although D inherits A, B and C, it only called C and then A.</span></span><br><span class="line">    <span class="comment">// - Call D.bar and check the transaction logs</span></span><br><span class="line">    <span class="comment">//   D called C, then B, and finally A.</span></span><br><span class="line">    <span class="comment">//   Although super was called twice (by B and C) it only called A once.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>比如B合约要继承A合约，但是A合约里有一个构造函数（编译时要输入的参数）该这样写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.5</span>;</span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    string public name;</span><br><span class="line">    <span class="title function_">constructor</span> ( string memory _name )&#123;</span><br><span class="line">        name = _name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract B &#123;</span><br><span class="line">    string public text;</span><br><span class="line">    <span class="title function_">constructor</span> ( string memory _text )&#123;</span><br><span class="line">        text = _text;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在已知构造的内容可以这样定义</span></span><br><span class="line">contract C is <span class="title function_">A</span>(<span class="string">&quot;A_name&quot;</span>),<span class="title function_">B</span>(<span class="params"><span class="string">&quot;B_TEXT&quot;</span></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果不知道这两个构造的内容，要由部署者部署的时候输入要用这种办法</span></span><br><span class="line">contract D is A, B&#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"> string memory _name, string memory _text </span>) <span class="title function_">A</span>(_name) <span class="title function_">B</span>(<span class="params">_text</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果只有一个继承时的构造函数需要由部署者部署那么可以这样混合使用</span></span><br><span class="line">contract E is <span class="title function_">A</span>(<span class="string">&quot;A_name&quot;</span>),B&#123;</span><br><span class="line">    <span class="title function_">constructor</span> ( string memory _text ) <span class="title function_">B</span>(<span class="params">_text</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="调用父级合约">调用父级合约</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Inheritance tree</span></span><br><span class="line"><span class="comment">   A</span></span><br><span class="line"><span class="comment"> /  \</span></span><br><span class="line"><span class="comment">B   C</span></span><br><span class="line"><span class="comment"> \ /</span></span><br><span class="line"><span class="comment">  D</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">contract A &#123;</span><br><span class="line">    <span class="comment">// This is called an event. You can emit events from your function</span></span><br><span class="line">    <span class="comment">// and they are logged into the transaction log.</span></span><br><span class="line">    <span class="comment">// In our case, this will be useful for tracing function calls.</span></span><br><span class="line">    event <span class="title class_">Log</span>(string message);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.foo called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;A.bar called&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract B is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;B.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract C is A &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.foo called&quot;</span>);</span><br><span class="line">        A.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public virtual override &#123;</span><br><span class="line">        emit <span class="title class_">Log</span>(<span class="string">&quot;C.bar called&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract D is B, C &#123;</span><br><span class="line">    <span class="comment">// Try:</span></span><br><span class="line">    <span class="comment">// - Call D.foo and check the transaction logs.</span></span><br><span class="line">    <span class="comment">//   Although D inherits A, B and C, it only called C and then A.</span></span><br><span class="line">    <span class="comment">// - Call D.bar and check the transaction logs</span></span><br><span class="line">    <span class="comment">//   D called C, then B, and finally A.</span></span><br><span class="line">    <span class="comment">//   Although super was called twice (by B and C) it only called A once.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">foo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) public <span class="title function_">override</span>(<span class="params">B, C</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">bar</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用<code>super.函数名()</code>或者<code>父合约.函数名()</code></p>
]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>Solidity</tag>
        <tag>智能合约</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链基础知识</title>
    <url>/2022/05/18/%E5%8C%BA%E5%9D%97%E9%93%BE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<blockquote>
<p>在我的看不到的世界里，还有这么一个有趣的生态链！</p>
</blockquote>
<h1>区块链基础知识</h1>
<p>区块链：顾名思义，由每一个区块组成的链条</p>
<p>他每一块存储的都是每一笔每一笔的转账。这样子就可以所有人都看得见，并且难以篡改的分部署账本</p>
<p>hash：区块的哈希 相当于人类的指纹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如hash(数据) = xxxx</span><br></pre></td></tr></table></figure>
<p>如果数据变动了，对应的hash值也会变，当一个新的hash值被建立出来的时候，他的<code>hash</code>值就是固定的</p>
<p>为什么说区块链技术是透明去中心化的，因为你创建一个新区块的时候，他一样会存储上一个区块从而形成一个链条</p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220513190657680.png" alt="image-20220513190657680"></p>
<p>但是区块验证前一个hash这种也是有可能被篡改的，比如数据2的区块被改了你需要从数据2开始以后的（数据3、数据4、数据5…）全部重新算一遍，让这个链条重新变得合理，但是区块链会防止这种情况发生，它引入了<strong>工作量证明机制（POW）</strong></p>
<p>工作量证明机制（POW）：他会根据你的工作量来进行相应的评估动作</p>
<p>举例为游戏，工作量=经验、验证工作量=升级按钮（工作量证明机制），你需要一万的经验值才能升级，那么如果你开挂了，经验值可以改成2倍获取，那么这个工作量证明机制会将经验动态调整为2倍也就是二万才能升级，以此来维持所付出多少就有多少回报的稳定</p>
<p>比如挖矿就是利用工作量证明机制，矿工不断的搜寻区块头部的哈希然后打包交易数据并且做到全网广播，然后由其他矿工对其数据加以验证，在确认无误后将其留存上链，然后重复这些动作的过程称为挖矿，而通过挖矿获得记账的权利以及奖励</p>
<p>以下是<code>python3</code>简单验证头部哈希的代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line">    msgx = <span class="string">&#x27;ctl&#x27;</span></span><br><span class="line">    msg = <span class="string">&#x27;&#x27;&#x27;&#123;msg&#125;&#123;i&#125;&#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(msg=msgx,i=i).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">    hash_mgs = md5(msg).hexdigest()</span><br><span class="line">    <span class="keyword">if</span> hash_mgs[<span class="number">0</span>:<span class="number">5</span>] == <span class="string">&#x27;00000&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(msg,hash_mgs)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220513205211175.png" alt="image-20220513205211175"></p>
<p>可以看到，光验证前五位00000的时候都到了26万次验证，那如果是10位或者其他会更复杂，这也就要求了挖矿得有强大的算力</p>
<p><strong>P2P点对点网络</strong></p>
<p>区块链还引入了这一个共识机制，比如说我创建了一个区块，会对全部人进行广播，来验证这个区块是否被篡改，只有全部人达到共识（验证成功）才会加入到这个链当中</p>
<h2 id="python搭建一个简单易懂的区块链">python搭建一个简单易懂的区块链</h2>
<p>区块链的基本实现功能：</p>
<p>1、区块：一个新的区块链它会将自己数据 加上 上一个区块的哈希值为自己本身的数据哈希值（<code>hash = sha256(data+上一个区块哈希值)</code>）</p>
<p>2、链：它本身是一个数组，由区块连成一条链</p>
<p>每一个链生成的时候有一个祖先区块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sha256</span>(<span class="params">dataNeedSha</span>):</span><br><span class="line">    sha256 = hashlib.sha256()</span><br><span class="line">    sha256.update(dataNeedSha.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> sha256.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">存储的数据</span></span><br><span class="line"><span class="string">1、之前的区块链</span></span><br><span class="line"><span class="string">2、自己的哈希值 它是由存储在区块里的信息算出来的（data+之前区块链的哈希值）</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Block</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,datastr,previousHash</span>):</span><br><span class="line">        self.datastr = datastr <span class="comment"># 区块本身数据</span></span><br><span class="line">        self.previousHash = previousHash <span class="comment"># 上一个区块的哈希值</span></span><br><span class="line">        self.<span class="built_in">hash</span> = self.computeHash <span class="comment"># 区块本身数据的哈希值</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">computeHash</span>(<span class="params">self</span>): <span class="comment"># 区块本身数据的哈希值为sha256(data+上一个哈希值)</span></span><br><span class="line">        <span class="comment"># print(self.previousHash,self.datastr)</span></span><br><span class="line">        strData = self.datastr+self.previousHash</span><br><span class="line">        <span class="keyword">return</span> sha256(strData)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ShowBlock</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(&#123;<span class="string">&#x27;data&#x27;</span>: self.datastr, <span class="string">&#x27;previousHash&#x27;</span>: self.previousHash, <span class="string">&#x27;hash&#x27;</span>: self.<span class="built_in">hash</span>&#125;)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">区块的链</span></span><br><span class="line"><span class="string">1、生成祖先区块</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Chain</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.chain = [self.bigBang]</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">bigBang</span>(<span class="params">self</span>):</span><br><span class="line">        genesisBlock = Block(<span class="string">&#x27;我是祖先区块&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> genesisBlock</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">getLastBlockHash</span>(<span class="params">self</span>): <span class="comment"># 获取最后一个区块的哈希值，用于添加到链中当上一个区块的哈希值</span></span><br><span class="line">        <span class="keyword">return</span> self.chain[ <span class="built_in">len</span>(self.chain)-<span class="number">1</span> ].<span class="built_in">hash</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">ShowChain</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> self.chain:</span><br><span class="line">            i.ShowBlock()</span><br><span class="line">    <span class="comment"># 添加区块到链上</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">addBlockToChain</span>(<span class="params">self,newBlock</span>):</span><br><span class="line">        <span class="comment"># 1、首先找到上一个区块的哈希值然后传入到Block类的previousHash</span></span><br><span class="line">        newBlock.previousHash = self.getLastBlockHash</span><br><span class="line">        newBlock.<span class="built_in">hash</span> = newBlock.computeHash</span><br><span class="line">        self.chain.append(newBlock)</span><br><span class="line">    <span class="comment"># 验证当前的链是否合法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">validateChain</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 1、验证区块的哈希值和他的previousHash是否相同</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.chain) == <span class="number">1</span>: <span class="comment"># 如果区块数组只有一个区块，即表示是刚新建的，不存在篡改返回True即可</span></span><br><span class="line">            <span class="comment"># 上一个注释如果觉得不够严谨也可以验证一下</span></span><br><span class="line">            <span class="keyword">if</span> self.chain[<span class="number">0</span>].<span class="built_in">hash</span> == self.chain[<span class="number">0</span>].computeHash:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 2、self.chian[1]是第二个区块开始</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(self.chain)):</span><br><span class="line">            <span class="keyword">if</span> self.chain[i].<span class="built_in">hash</span> != self.chain[i].computeHash:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;数据被篡改&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            <span class="keyword">if</span> self.chain[i].previousHash != self.chain[i-<span class="number">1</span>].<span class="built_in">hash</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;前后数据链断裂&#x27;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">shoulianBlock1 = Block(<span class="string">&#x27;转账100元&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">shoulianBlock2 = Block(<span class="string">&#x27;转账200元&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">shoulianBlock3 = Block(<span class="string">&#x27;转账300元&#x27;</span>,<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">shoulianChain = Chain()</span><br><span class="line">shoulianChain.addBlockToChain(shoulianBlock1)</span><br><span class="line">shoulianChain.addBlockToChain(shoulianBlock2)</span><br><span class="line">shoulianChain.addBlockToChain(shoulianBlock3)</span><br><span class="line">shoulianChain.chain[<span class="number">1</span>].datastr = <span class="string">&#x27;转账33300元&#x27;</span> <span class="comment"># 尝试篡改账本为转账1000元 可以看到是不行的 因为这里只是改了他的data 并没有改computeHash值</span></span><br><span class="line"><span class="comment"># 尝试修正computeHash</span></span><br><span class="line">shoulianChain.chain[<span class="number">1</span>].<span class="built_in">hash</span> = shoulianChain.chain[<span class="number">1</span>].computeHash</span><br><span class="line">shoulianChain.ShowChain()</span><br><span class="line"><span class="built_in">print</span>(shoulianChain.validateChain())</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>web3.py</title>
    <url>/2022/05/19/web3-py/</url>
    <content><![CDATA[<p>学习来自：<a href="https://gitchat.csdn.net/columnTopic/5ae2846b4edf1d4548768330">https://gitchat.csdn.net/columnTopic/5ae2846b4edf1d4548768330</a></p>
<h2 id="连接ganache">连接ganache</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入Web3类</span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="comment"># 导入HTTPProvider类   </span></span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"><span class="comment"># 连接ganache服务</span></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="comment"># 获取ganache服务的第1个测试账号。</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.accounts[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517154624521.png" alt="image-20220517154624521"></p>
<h2 id="Web3-eth-API">Web3.eth API</h2>
<blockquote>
<p>这里将介绍一下 Web3.eth 中的 API，这些 API 主要与以太或以太坊有关。</p>
</blockquote>
<h2 id="获取最新区块信息">获取最新区块信息</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"> <span class="comment"># 获取最新的区块</span></span><br><span class="line">block = web3.eth.getBlock(<span class="string">&#x27;latest&#x27;</span>) <span class="comment"># 获取区块的最后一个 也就是最新的区块</span></span><br><span class="line"><span class="comment"># 输出区块信息</span></span><br><span class="line"><span class="built_in">print</span>(block)</span><br><span class="line"><span class="comment"># 输出区块链</span></span><br><span class="line"><span class="built_in">print</span>(block[<span class="string">&#x27;number&#x27;</span>])</span><br><span class="line"><span class="comment"># 输出区块哈希码</span></span><br><span class="line"><span class="built_in">print</span>(block[<span class="string">&#x27;hash&#x27;</span>])</span><br><span class="line"><span class="comment"># 用另外一种方法输出区块的哈希码</span></span><br><span class="line"><span class="built_in">print</span>(block.<span class="built_in">hash</span>)</span><br><span class="line"><span class="comment"># 区块号是只读的，所以不能设置，否则会抛出异常</span></span><br><span class="line"><span class="comment"># block.number = 1234</span></span><br></pre></td></tr></table></figure>
<h2 id="获取默认账户和默认区块">获取默认账户和默认区块</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="comment"># 获取默认账户，为空</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.defaultAccount)</span><br><span class="line"><span class="comment"># 将第一个测试账户设置为默认账户 </span></span><br><span class="line">web3.eth.defaultAccount = web3.eth.accounts[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 输出默认账户</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.defaultAccount)</span><br><span class="line"><span class="comment"># 输出默认区块</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.defaultBlock) <span class="comment"># 默认区块是最新产生的区块。</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517155220482.png" alt="image-20220517155220482"></p>
<h2 id="获取同步状态">获取同步状态</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="built_in">print</span>(web3.eth.syncing)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517155406238.png" alt="image-20220517155406238"></p>
<p>通过 <code>web3.eth.syncing</code> 属性可以获取区块的同步状态，因为以太坊钱包每次启动时需要同步整个区块链中还没有下载到本地的区块。</p>
<p>如果没有同步，直接返回 <code>false</code>。</p>
<h2 id="获取矿工账号">获取矿工账号</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="built_in">print</span>(web3.eth.coinbase) <span class="comment"># 矿工账号</span></span><br></pre></td></tr></table></figure>
<h2 id="判断当前节点是否正在挖矿">判断当前节点是否正在挖矿</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:8545&quot;</span>));</span><br><span class="line"><span class="comment"># 输出矿工账号</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.mining)</span><br></pre></td></tr></table></figure>
<p>通过 <code>web3.eth.mining</code> 属性可以判断当前账户是否正在挖矿，如果正在挖矿，返回 <code>True</code>，否则返回 <code>False</code>。</p>
<h2 id="获取当前-gas-的价格（单位：wei）">获取当前 gas 的价格（单位：wei）</h2>
<p><code>gas</code>理解为能量，每次运行一个合约的代码都会消耗一定的能量</p>
<p>单位：wei</p>
<blockquote>
<p>1eth == 10**18wei</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="built_in">print</span>(web3.eth.gasPrice)</span><br><span class="line"><span class="comment"># 输出是20000000000wei 相当于 0.00000002eth</span></span><br></pre></td></tr></table></figure>
<h2 id="获取已知的所有账户">获取已知的所有账户</h2>
<p>通过 <code>web3.eth.accounts</code> 属性可以获取当前节点已知的所有账户，如果在 <code>ganache</code>测试环境，会获得10个用户测试的账户地址。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="comment"># 获取并输出10个测试账户</span></span><br><span class="line"><span class="keyword">for</span> account <span class="keyword">in</span> web3.eth.accounts:</span><br><span class="line">    <span class="built_in">print</span>(account)</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517160205779.png" alt="image-20220517160205779"></p>
<h2 id="获取总区块数">获取总区块数</h2>
<p>通过 web3.eth.blockNumber 属性可以获取以太坊网络总块数（近似）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(web3.eth.blockNumber)</span><br></pre></td></tr></table></figure>
<h2 id="获取余额">获取余额</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(web3.eth.getBalance(<span class="string">&#x27;0x750Db8107F57b9E9879F7ce592986799CB06bc0c&#x27;</span>)) <span class="comment"># 单位WEI</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.getBalance(<span class="string">&#x27;0x750Db8107F57b9E9879F7ce592986799CB06bc0c&#x27;</span>) / <span class="number">10</span>**<span class="number">18</span>) <span class="comment"># 单位ETH</span></span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517160456694.png" alt="image-20220517160456694"></p>
<p>这个<code>0x750Db8107F57b9E9879F7ce592986799CB06bc0c</code>是我十个测试账户中其中一个地址</p>
<h2 id="获取区块信息">获取区块信息</h2>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web3.eth.getBlock(区块号)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(web3.eth.getBlock(<span class="number">31</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517160714294.png" alt="image-20220517160714294"></p>
<h2 id="获取区块包含的交易数">获取区块包含的交易数</h2>
<p>要想让交易成功，必须有可以存储交易的区块。而区块是由矿工挖出的。一个区块可能会保存一笔交易，也可能保存多笔交易。通过 <code>web3.eth.getBlockTransactionCount(区块号)</code> 函数可以获取指定区块包含的交易数。</p>
<h2 id="获取交易信息">获取交易信息</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(web3.eth.getTransaction(<span class="string">&#x27;0xc038a167341cd6518ce0eec076d0d1e38262d3770467266d328b5a6c00039d27&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517161142858.png" alt="image-20220517161142858"></p>
<p>需要提供交易的哈希代码</p>
<h2 id="获取指定账号的交易次数">获取指定账号的交易次数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(web3.eth.getTransactionCount(<span class="string">&#x27;0xc191707cd06daFa0C17222ebCF78c955AFfEE340&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h1>向以太坊发送交易</h1>
<p>通过 <code>web3.eth.sendTransaction</code> 函数可以向以太坊发送交易，该函数需要传递一个字典类型参数。如果使用 <code>JavaScript</code>，该参数类型应该是一个对象。</p>
<p>字典参数 <code>key</code> 的函数以如下：</p>
<ul>
<li>from：字节或文本类型，十六进制的账户地址，该地址是<strong>发送交易的账户地址</strong>，默认值是 web3.eth.defaultAccount。（谁发起交易）</li>
<li>to：字节或文本类型，十六进制的账户地址，该地址是<strong>数字货币的转入账户</strong>。（这钱转给谁）</li>
<li>gas：整数类型，可选的，默认是 90000。这是一个预估值，是完成交易所需的 gas 数，<strong>该数应该比实际需要的 gas 数大一些</strong>，否则无法成功完成交易；如果 gas 未被用完，会返还给 from 指定的账户。（如果能量不够，这个交易会失败并且把钱退回给你）</li>
<li>gasPrice：整数类型，可选的，gas 的价格。</li>
<li>value：整数类型，可选的，与交易一起发送的整数值。（转多少钱）</li>
<li>data：字节或文本类型，合约的二进制编码或被调用函数的签名和参数编码。</li>
<li>nonce ：整数类型，可选的，可以使用同样的 nonce 覆盖正在发送的交易，用于交易的标识。</li>
</ul>
<p>如果交易指定了 <code>data</code>，但没有指定 <code>gas</code>，<code>gas</code> 会使用 <code>estimateGas</code> 函数估算，如果估算的 <code>gas</code> 值超过了 <code>gasLimit</code>，会抛出异常。</p>
<p>这里我的默认地址是<code>0x750Db8107F57b9E9879F7ce592986799CB06bc0c</code>我要给<code>0x19b2Db173220C9fF6a7fD8FEAAcC7285B9B98ED5</code>转账0.1个ETH，并且返回他的交易哈希代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="comment"># value的单位是wei 转换成eth是0.1个</span></span><br><span class="line">tx_ = web3.eth.sendTransaction(&#123;<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x19b2Db173220C9fF6a7fD8FEAAcC7285B9B98ED5&#x27;</span>, <span class="string">&#x27;from&#x27;</span>: web3.eth.coinbase, <span class="string">&#x27;value&#x27;</span>: <span class="number">100000000000000000</span>&#125;).<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取交易哈希代码：&quot;</span>,tx_)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;获取交易的详细信息&quot;</span>,web3.eth.getTransaction( tx_ ))</span><br></pre></td></tr></table></figure>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517162129013.png" alt="image-20220517162129013"></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517162155443.png" alt="image-20220517162155443"></p>
<h2 id="预估交易的gas值">预估交易的gas值</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line">transactionInfo = &#123;<span class="string">&#x27;to&#x27;</span>: <span class="string">&#x27;0x19b2Db173220C9fF6a7fD8FEAAcC7285B9B98ED5&#x27;</span>, <span class="string">&#x27;from&#x27;</span>: web3.eth.coinbase, <span class="string">&#x27;value&#x27;</span>: <span class="number">100000000000000000</span>&#125;</span><br><span class="line"><span class="comment"># 预估交易所需gas</span></span><br><span class="line"><span class="built_in">print</span>(web3.eth.estimateGas(transactionInfo))</span><br></pre></td></tr></table></figure>
<h1>Web3 API</h1>
<blockquote>
<p>提供了一些通用的 API，如版本信息、网络信息、提取摘要字符串等。</p>
</blockquote>
<h2 id="获取以太坊-JS-的-API-信息">获取以太坊 JS 的 API 信息</h2>
<p>通过 <code>web3.api</code> 属性可以获取当前以太坊 JS 的 API 的版本号。</p>
<p>老版本是<code>web3.version.api</code>，但是最新的已经弃用了改成<code>web3.api</code></p>
<p><img src="https://raw.githubusercontent.com/shoulian2022/iamges/main/mark_imageimage-20220517162627306.png" alt="image-20220517162627306"></p>
<h2 id="获取以太坊节点版本">获取以太坊节点版本</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">web3.clientVersion</span><br><span class="line"><span class="comment"># 输出的是EthereumJS TestRPC/v2.13.1/ethereum-js</span></span><br></pre></td></tr></table></figure>
<h2 id="获得以太坊的协议版本">获得以太坊的协议版本</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">web3.eth.protocol_version</span><br></pre></td></tr></table></figure>
<h2 id="检测是否与以太坊节点连接">检测是否与以太坊节点连接</h2>
<p>通过 <code>web3.isConnected</code> 函数可以检测是否与某个以太坊节点成功连接。</p>
<p>返回的是布尔值，true或false</p>
<h2 id="重置-Web3-的状态">重置 Web3 的状态</h2>
<blockquote>
<p>暂时还不理解有什么用…，懂了回来更改</p>
</blockquote>
<p>通过 <code>web3.reset</code> 函数可以重置 <code>Web3</code> 的专题，置除了 <code>manager</code> 以外的其他所有东西，卸载 <code>filter</code>，停止状态轮询。如果设置为 <code>true</code>，将会卸载所有的 <code>filter</code>，但会保留 <code>web3.eth.isSyncing()</code> 的状态轮询。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">web3.reset();</span><br></pre></td></tr></table></figure>
<h2 id="Wei-和以太坊其他单位的互转">Wei 和以太坊其他单位的互转</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span>  HTTPProvider</span><br><span class="line"></span><br><span class="line">web3 = Web3(HTTPProvider(<span class="string">&quot;http://localhost:7545&quot;</span>));</span><br><span class="line"><span class="comment"># 将10000000000000 wei 转换为以太（ether）</span></span><br><span class="line">values = web3.fromWei(<span class="number">10000000000000</span>,<span class="string">&#x27;ether&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(values)</span><br><span class="line"><span class="comment"># 将0.1ether转换为wei</span></span><br><span class="line"><span class="built_in">print</span>(web3.toWei(<span class="number">0.1</span>,<span class="string">&#x27;ether&#x27;</span>))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web3</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
